name: k8s-deployment

on:
  push:
    branches:
      - main

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY_NAME: nexploretestdeploy
  CLUSTER_NAME: whale-k8s
  CLUSTER_RESOURCE_GROUP: nexplore_test_deploy
  NAMESPACE: ingress-basic
  SECRET: acr-secret
  APP_NAME: blue-whale

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main

      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      # Container build and push to a Azure Container registry (ACR)
      - run: |
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          docker build . -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ secrets.VERSION_TAG }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ secrets.VERSION_TAG }}

      # Set the target Azure Kubernetes Service (AKS) cluster.
      - uses: azure/aks-set-context@v1
        with:
          creds: "${{ secrets.AZURE_CREDENTIALS }}"
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: ${{ env.SECRET }}
          namespace: ${{ env.NAMESPACE }}
          force: true

      #Install Helm
      - name: Helm tool installer
        uses: Azure/setup-helm@v1

      # Add the ingress-nginx repository
      - run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx

      # Create Use Helm to deploy an NGINX ingress controller
      - run: |
          helm install nginx-ingress ingress-nginx/ingress-nginx \
          --namespace ${{ env.NAMESPACE }} \
          --set controller.replicaCount=2 \
          --set controller.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set defaultBackend.nodeSelector."beta\.kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.patch.nodeSelector."beta\.kubernetes\.io/os"=linux

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1.4
        with:
          manifests: |
            demo/aks-helloworld-one.yml
            demo/aks-helloworld-two.yml
            demo/hello-world-ingress.yml
          namespace: ${{ env.NAMESPACE }}
          # images: |
          #   ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
          # imagepullsecrets: |
          #   ${{ env.SECRET }}
          # namespace: ${{ env.NAMESPACE }}

      # Deploy app to AKS
      # - uses: azure/k8s-deploy@v1.4
      #   with:
      #     manifests: |
      #       manifests/deployment.yml
      #       manifests/service.yml
      #       manifests/ingress.yml
      #     images: |
      #       ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
      #     imagepullsecrets: |
      #       ${{ env.SECRET }}
      #     namespace: ${{ env.NAMESPACE }}
